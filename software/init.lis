                        .module init.c
                        .area text(rom, con, rel)
 0000                   .dbfile source\init.c
 0000                   .dbfile D:\monitor\software\source\init.c
 0000                   .dbfunc e port_init _port_init fV
                        .even
 0000           _port_init::
 0000                   .dbline -1
 0000                   .dbline 6
 0000           ; #include "define.h"
 0000           ; #include "timer.h"
 0000           ; #include "spi.h"
 0000           ; #include "uart.h"
 0000           ; void port_init(void)
 0000           ; {
 0000                   .dbline 7
 0000           ;        PORTA = 0x00;
 0000 2224              clr R2
 0002 2BBA              out 0x1b,R2
 0004                   .dbline 8
 0004           ;        DDRA  = 0x00;
 0004 2ABA              out 0x1a,R2
 0006                   .dbline 9
 0006           ;        PORTB = 0x00;
 0006 28BA              out 0x18,R2
 0008                   .dbline 10
 0008           ;        DDRB  = 0x00;
 0008 27BA              out 0x17,R2
 000A                   .dbline 11
 000A           ;        PORTC = 0x00; //m103 output only
 000A 25BA              out 0x15,R2
 000C                   .dbline 12
 000C           ;        DDRC  = 0x00;
 000C 24BA              out 0x14,R2
 000E                   .dbline 13
 000E           ;        PORTD = 0x00;
 000E 22BA              out 0x12,R2
 0010                   .dbline 14
 0010           ;        DDRD  = 0x02;
 0010 82E0              ldi R24,2
 0012 81BB              out 0x11,R24
 0014                   .dbline -2
 0014           L1:
 0014                   .dbline 0 ; func end
 0014 0895              ret
 0016                   .dbend
 0016                   .dbfunc e watchdog_init _watchdog_init fV
                        .even
 0016           _watchdog_init::
 0016                   .dbline -1
 0016                   .dbline 20
 0016           ; }
 0016           ; 
 0016           ; //Watchdog initialize
 0016           ; // prescale: 32K 
 0016           ; void watchdog_init(void)
 0016           ; {
 0016                   .dbline 21
 0016           ;        WDR(); //this prevents a timout on enabling
 0016 A895              wdr
 0018                   .dbline -2
 0018           L2:
 0018                   .dbline 0 ; func end
 0018 0895              ret
 001A                   .dbend
 001A                   .dbfunc e init_devices _init_devices fV
                        .even
 001A           _init_devices::
 001A                   .dbline -1
 001A                   .dbline 32
 001A           ;        #ifdef CLOCK11059
 001A           ;        WDTCR = 0x09; //WATCHDOG ENABLED - dont forget to issue WDRs
 001A           ;        #endif
 001A           ;        #ifdef CLOCK73728
 001A           ; 
 001A           ;        #endif
 001A           ; }
 001A           ; 
 001A           ; //call this routine to initialize all peripherals
 001A           ; void init_devices(void)
 001A           ; {
 001A                   .dbline 34
 001A           ;  //stop errant interrupts until set up
 001A           ;        CLI(); //disable all interrupts
 001A F894              cli
 001C                   .dbline 35
 001C           ;        port_init();
 001C F1DF              xcall _port_init
 001E                   .dbline 36
 001E           ;        watchdog_init();
 001E FBDF              xcall _watchdog_init
 0020                   .dbline 37
 0020           ;        timer0_init();
 0020 0E940000          xcall _timer0_init
 0024                   .dbline 38
 0024           ;        spi_init();
 0024 0E940000          xcall _spi_init
 0028                   .dbline 39
 0028           ;        uart0_init();
 0028 0E940000          xcall _uart0_init
 002C                   .dbline 40
 002C           ;        SPI_MasterInit();
 002C 0E940000          xcall _SPI_MasterInit
 0030                   .dbline 42
 0030           ; 
 0030           ;        MCUCR = 0x0A;
 0030 8AE0              ldi R24,10
 0032 85BF              out 0x35,R24
 0034                   .dbline 43
 0034           ;        GICR  = 0xC0;
 0034 80EC              ldi R24,192
 0036 8BBF              out 0x3b,R24
 0038                   .dbline 44
 0038           ;        TIMSK = 0x01; //timer interrupt sources
 0038 81E0              ldi R24,1
 003A 89BF              out 0x39,R24
 003C                   .dbline 45
 003C           ;        SEI(); //re-enable interrupts
 003C 7894              sei
 003E                   .dbline -2
 003E           L3:
 003E                   .dbline 0 ; func end
 003E 0895              ret
 0040                   .dbend
 0040           ;  //all peripherals are now initialized
 0040           ; }
 0040           ; 
